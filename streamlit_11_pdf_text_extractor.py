import streamlit as st
import tempfile
import os

# PDF ÎùºÏù¥Î∏åÎü¨Î¶¨ ÏûÑÌè¨Ìä∏ (ÏÑ§ÏπòÎêòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞ None)
try:
    import PyPDF2
except ImportError:
    PyPDF2 = None

try:
    import pdfplumber
except ImportError:
    pdfplumber = None

try:
    import pymupdf  # PyMuPDF
except ImportError:
    pymupdf = None


# ÌéòÏù¥ÏßÄ ÏÑ§Ï†ï
st.set_page_config(
    page_title="PDF ÌÖçÏä§Ìä∏ Ï∂îÏ∂úÍ∏∞",
    page_icon="üìÑ",
    layout="wide"
)

st.title("üìÑ PDF ÌÖçÏä§Ìä∏ Ï∂îÏ∂úÍ∏∞")
st.markdown("Îã§ÏñëÌïú Python ÎùºÏù¥Î∏åÎü¨Î¶¨Î•º ÏÇ¨Ïö©ÌïòÏó¨ PDFÏóêÏÑú ÌÖçÏä§Ìä∏Î•º Ï∂îÏ∂úÌï©ÎãàÎã§.")

# ÏÇ¨Ïù¥ÎìúÎ∞îÏóê ÎùºÏù¥Î∏åÎü¨Î¶¨ ÎπÑÍµê Ï†ïÎ≥¥
with st.sidebar:
    st.header("üìö ÎùºÏù¥Î∏åÎü¨Î¶¨ ÎπÑÍµê")
    st.markdown("""
    ### PyPDF2
    - ‚úÖ Í∞ÄÎ≥çÍ≥† Îπ†Î•∏ Ï≤òÎ¶¨
    - ‚úÖ ÏàúÏàò Python Íµ¨ÌòÑ
    - ‚ùå Î≥µÏû°Ìïú Î†àÏù¥ÏïÑÏõÉ Ï≤òÎ¶¨ ÏïΩÌï®
    
    ### pdfplumber
    - ‚úÖ ÌÖåÏù¥Î∏î Ï∂îÏ∂ú Ïö∞Ïàò
    - ‚úÖ Î†àÏù¥ÏïÑÏõÉ Î∂ÑÏÑù Í∞ïÏ†ê
    - ‚ùå Ï≤òÎ¶¨ ÏÜçÎèÑ ÎäêÎ¶º
    
    ### PyMuPDF
    - ‚úÖ Í∞ÄÏû• Îπ†Î•∏ ÏÜçÎèÑ (6Î∞∞ Îπ†Î¶Ñ)
    - ‚úÖ Ï†ïÌôïÌïú ÌÖçÏä§Ìä∏ Ï∂îÏ∂ú
    - ‚úÖ ÏÑúÏãù Î≥¥Ï°¥ Ïö∞Ïàò
    - ‚ùå AGPL ÎùºÏù¥ÏÑ†Ïä§
    
    ---
    ### Í∂åÏû• ÏÇ¨Ïö© ÏÇ¨Î°Ä
    - **Í∞ÑÎã®Ìïú ÌÖçÏä§Ìä∏**: PyPDF2
    - **ÌÖåÏù¥Î∏î/Î†àÏù¥ÏïÑÏõÉ**: pdfplumber
    - **ÏÜçÎèÑ/Ï†ïÌôïÎèÑ**: PyMuPDF
    """)


# ÌÖçÏä§Ìä∏ Ï∂îÏ∂ú Ìï®ÏàòÎì§
def extract_with_pypdf2(pdf_path):
    """PyPDF2Î•º ÏÇ¨Ïö©Ìïú ÌÖçÏä§Ìä∏ Ï∂îÏ∂ú"""
    pages_text = []
    try:
        with open(pdf_path, 'rb') as file:
            reader = PyPDF2.PdfReader(file)
            total_pages = len(reader.pages)
            
            # ÏßÑÌñâ ÏÉÅÌô© ÌëúÏãú
            progress_bar = st.progress(0)
            for page_num in range(total_pages):
                page = reader.pages[page_num]
                text = page.extract_text()
                pages_text.append(text)
                progress_bar.progress((page_num + 1) / total_pages)
            progress_bar.empty()
            
    except Exception as e:
        raise Exception(f"PyPDF2 Ï≤òÎ¶¨ Ïò§Î•ò: {e}")
    
    return pages_text


def extract_with_pdfplumber(pdf_path):
    """pdfplumberÎ•º ÏÇ¨Ïö©Ìïú ÌÖçÏä§Ìä∏ Ï∂îÏ∂ú"""
    pages_text = []
    try:
        with pdfplumber.open(pdf_path) as pdf:
            total_pages = len(pdf.pages)
            
            # ÏßÑÌñâ ÏÉÅÌô© ÌëúÏãú
            progress_bar = st.progress(0)
            for i, page in enumerate(pdf.pages):
                text = page.extract_text()
                pages_text.append(text or "")
                progress_bar.progress((i + 1) / total_pages)
            progress_bar.empty()
            
    except Exception as e:
        raise Exception(f"pdfplumber Ï≤òÎ¶¨ Ïò§Î•ò: {e}")
    
    return pages_text


def extract_with_pymupdf(pdf_path):
    """PyMuPDFÎ•º ÏÇ¨Ïö©Ìïú ÌÖçÏä§Ìä∏ Ï∂îÏ∂ú"""
    pages_text = []
    try:
        doc = pymupdf.open(pdf_path)
        total_pages = len(doc)
        
        # ÏßÑÌñâ ÏÉÅÌô© ÌëúÏãú
        progress_bar = st.progress(0)
        for page_num in range(total_pages):
            page = doc[page_num]
            text = page.get_text()
            pages_text.append(text)
            progress_bar.progress((page_num + 1) / total_pages)
        progress_bar.empty()
        
        doc.close()
    except Exception as e:
        raise Exception(f"PyMuPDF Ï≤òÎ¶¨ Ïò§Î•ò: {e}")
    
    return pages_text


# Î©îÏù∏ UI
st.header("‚öôÔ∏è ÏÑ§Ï†ï")

# ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÎùºÏù¥Î∏åÎü¨Î¶¨ Ï≤¥ÌÅ¨
available_libs = []
lib_status = {}

if PyPDF2:
    available_libs.append("PyPDF2")
    lib_status["PyPDF2"] = "‚úÖ ÏÑ§ÏπòÎê®"
else:
    lib_status["PyPDF2"] = "‚ùå ÎØ∏ÏÑ§Ïπò (pip install PyPDF2)"

if pdfplumber:
    available_libs.append("pdfplumber")
    lib_status["pdfplumber"] = "‚úÖ ÏÑ§ÏπòÎê®"
else:
    lib_status["pdfplumber"] = "‚ùå ÎØ∏ÏÑ§Ïπò (pip install pdfplumber)"

if pymupdf:
    available_libs.append("PyMuPDF")
    lib_status["PyMuPDF"] = "‚úÖ ÏÑ§ÏπòÎê®"
else:
    lib_status["PyMuPDF"] = "‚ùå ÎØ∏ÏÑ§Ïπò (pip install pymupdf)"

# ÎùºÏù¥Î∏åÎü¨Î¶¨ ÏÑ§Ïπò ÏÉÅÌÉú ÌëúÏãú
col1, col2, col3 = st.columns(3)
with col1:
    st.metric("PyPDF2", lib_status["PyPDF2"])
with col2:
    st.metric("pdfplumber", lib_status["pdfplumber"])
with col3:
    st.metric("PyMuPDF", lib_status["PyMuPDF"])

# ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÎùºÏù¥Î∏åÎü¨Î¶¨Í∞Ä ÏóÜÎäî Í≤ΩÏö∞
if not available_libs:
    st.error("""
    ‚ö†Ô∏è PDF Ï≤òÎ¶¨ ÎùºÏù¥Î∏åÎü¨Î¶¨Í∞Ä ÏÑ§ÏπòÎêòÏñ¥ ÏûàÏßÄ ÏïäÏäµÎãàÎã§.
    
    Îã§Ïùå Î™ÖÎ†πÏñ¥Î°ú ÌïòÎÇò Ïù¥ÏÉÅÏùò ÎùºÏù¥Î∏åÎü¨Î¶¨Î•º ÏÑ§ÏπòÌï¥Ï£ºÏÑ∏Ïöî:
    ```bash
    pip install PyPDF2 pdfplumber pymupdf
    ```
    """)
    st.stop()

# ÎùºÏù¥Î∏åÎü¨Î¶¨ ÏÑ†ÌÉù
selected_lib = st.radio(
    "PDF Ï≤òÎ¶¨ ÎùºÏù¥Î∏åÎü¨Î¶¨ ÏÑ†ÌÉù",
    available_libs,
    help="""Í∞Å ÎùºÏù¥Î∏åÎü¨Î¶¨Ïùò ÌäπÏßï:
    - PyPDF2: Í∞ÄÎ≥çÍ≥† Îπ†Î•∏ Í∏∞Î≥∏ ÌÖçÏä§Ìä∏ Ï∂îÏ∂ú
    - pdfplumber: ÌÖåÏù¥Î∏îÍ≥º Î†àÏù¥ÏïÑÏõÉ Î∂ÑÏÑùÏóê Í∞ïÌï®
    - PyMuPDF: Í∞ÄÏû• Îπ†Î•¥Í≥† Ï†ïÌôïÌïú ÌÖçÏä§Ìä∏ Ï∂îÏ∂ú"""
)

st.markdown("---")

# PDF ÌååÏùº ÏóÖÎ°úÎìú
st.header("üì§ ÌååÏùº ÏóÖÎ°úÎìú")
pdf_file = st.file_uploader(
    "PDF ÌååÏùºÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî",
    type=['pdf'],
    help="ÌÖçÏä§Ìä∏Î•º Ï∂îÏ∂úÌï† PDF ÌååÏùºÏùÑ ÏóÖÎ°úÎìúÌïòÏÑ∏Ïöî"
)

if pdf_file is not None:
    # ÌååÏùº Ï†ïÎ≥¥ ÌëúÏãú
    col1, col2, col3 = st.columns(3)
    with col1:
        st.info(f"üìÅ ÌååÏùºÎ™Ö: {pdf_file.name}")
    with col2:
        st.info(f"üìä ÌÅ¨Í∏∞: {pdf_file.size:,} bytes")
    with col3:
        st.info(f"üîß ÎùºÏù¥Î∏åÎü¨Î¶¨: {selected_lib}")
    
    # ÏûÑÏãú ÌååÏùºÎ°ú Ï†ÄÏû•
    with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp_file:
        tmp_file.write(pdf_file.read())
        tmp_path = tmp_file.name
    
    # ÌÖçÏä§Ìä∏ Ï∂îÏ∂ú
    with st.spinner(f"{selected_lib}Î°ú ÌÖçÏä§Ìä∏ Ï∂îÏ∂ú Ï§ë..."):
        try:
            import time
            start_time = time.time()
            
            # ÏÑ†ÌÉùÎêú ÎùºÏù¥Î∏åÎü¨Î¶¨Î°ú Ï∂îÏ∂ú
            if selected_lib == "PyPDF2":
                pages_text = extract_with_pypdf2(tmp_path)
            elif selected_lib == "pdfplumber":
                pages_text = extract_with_pdfplumber(tmp_path)
            else:  # PyMuPDF
                pages_text = extract_with_pymupdf(tmp_path)
            
            # Ï≤òÎ¶¨ ÏãúÍ∞Ñ Í≥ÑÏÇ∞
            elapsed_time = time.time() - start_time
            
            # ÌÜµÍ≥Ñ ÌëúÏãú
            total_chars = sum(len(text) for text in pages_text)
            non_empty_pages = sum(1 for text in pages_text if text.strip())
            
            st.success(f"‚úÖ ÌÖçÏä§Ìä∏ Ï∂îÏ∂ú ÏôÑÎ£å! (Ï≤òÎ¶¨ ÏãúÍ∞Ñ: {elapsed_time:.2f}Ï¥à)")
            
            # Ï∂îÏ∂ú ÌÜµÍ≥Ñ
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                st.metric("Ï¥ù ÌéòÏù¥ÏßÄ", f"{len(pages_text)}Í∞ú")
            with col2:
                st.metric("ÌÖçÏä§Ìä∏ ÏûàÎäî ÌéòÏù¥ÏßÄ", f"{non_empty_pages}Í∞ú")
            with col3:
                st.metric("Ï¥ù Î¨∏Ïûê Ïàò", f"{total_chars:,}Ïûê")
            with col4:
                st.metric("Ï≤òÎ¶¨ ÏãúÍ∞Ñ", f"{elapsed_time:.2f}Ï¥à")
            
            st.markdown("---")
            
            # ÌéòÏù¥ÏßÄÎ≥Ñ ÌÖçÏä§Ìä∏ ÌëúÏãú
            st.header("üìÑ Ï∂îÏ∂úÎêú ÌÖçÏä§Ìä∏")
            
            # Ï†ÑÏ≤¥ ÌÖçÏä§Ìä∏ Îã§Ïö¥Î°úÎìú Î≤ÑÌäº
            all_text = "\n\n" + "="*50 + "\n\n".join([
                f"[ÌéòÏù¥ÏßÄ {i}]\n{text}" 
                for i, text in enumerate(pages_text, 1)
            ])
            
            st.download_button(
                label="üì• Ï†ÑÏ≤¥ ÌÖçÏä§Ìä∏ Îã§Ïö¥Î°úÎìú (TXT)",
                data=all_text,
                file_name=f"{pdf_file.name.replace('.pdf', '')}_extracted.txt",
                mime="text/plain"
            )
            
            # ÌéòÏù¥ÏßÄÎ≥Ñ ÌëúÏãú ÏòµÏÖò
            display_option = st.radio(
                "ÌëúÏãú ÏòµÏÖò",
                ["Î™®Îì† ÌéòÏù¥ÏßÄ", "ÌÖçÏä§Ìä∏Í∞Ä ÏûàÎäî ÌéòÏù¥ÏßÄÎßå"],
                horizontal=True
            )
            
            # ÌéòÏù¥ÏßÄÎ≥Ñ ÌëúÏãú
            for i, text in enumerate(pages_text, 1):
                # ÌëúÏãú ÏòµÏÖòÏóê Îî∞Îùº ÌïÑÌÑ∞ÎßÅ
                if display_option == "ÌÖçÏä§Ìä∏Í∞Ä ÏûàÎäî ÌéòÏù¥ÏßÄÎßå" and not text.strip():
                    continue
                
                # ÌéòÏù¥ÏßÄ Ìó§ÎçîÏôÄ Î¨∏Ïûê Ïàò ÌëúÏãú
                page_char_count = len(text)
                page_word_count = len(text.split()) if text.strip() else 0
                
                with st.expander(
                    f"üìÑ ÌéòÏù¥ÏßÄ {i} "
                    f"({page_char_count:,}Ïûê, {page_word_count:,}Îã®Ïñ¥)"
                ):
                    if text.strip():
                        # ÌÖçÏä§Ìä∏Î•º Ïª®ÌÖåÏù¥ÎÑàÏóê ÌëúÏãú
                        text_container = st.container()
                        with text_container:
                            # ÌÖçÏä§Ìä∏ ÎØ∏Î¶¨Î≥¥Í∏∞ (Ï≤òÏùå 500Ïûê)
                            if len(text) > 500:
                                preview_text = text[:500] + "..."
                                full_view = st.checkbox(
                                    "Ï†ÑÏ≤¥ ÌÖçÏä§Ìä∏ Î≥¥Í∏∞", 
                                    key=f"full_view_{i}"
                                )
                                if full_view:
                                    st.text_area(
                                        "Ï∂îÏ∂úÎêú ÌÖçÏä§Ìä∏",
                                        text,
                                        height=400,
                                        key=f"text_{i}"
                                    )
                                else:
                                    st.text_area(
                                        "Ï∂îÏ∂úÎêú ÌÖçÏä§Ìä∏ (ÎØ∏Î¶¨Î≥¥Í∏∞)",
                                        preview_text,
                                        height=200,
                                        key=f"preview_{i}"
                                    )
                            else:
                                st.text_area(
                                    "Ï∂îÏ∂úÎêú ÌÖçÏä§Ìä∏",
                                    text,
                                    height=200,
                                    key=f"text_{i}"
                                )
                            
                            # ÌéòÏù¥ÏßÄÎ≥Ñ Îã§Ïö¥Î°úÎìú Î≤ÑÌäº
                            st.download_button(
                                label=f"üì• ÌéòÏù¥ÏßÄ {i} Îã§Ïö¥Î°úÎìú",
                                data=text,
                                file_name=f"{pdf_file.name.replace('.pdf', '')}_page_{i}.txt",
                                mime="text/plain",
                                key=f"download_{i}"
                            )
                    else:
                        st.info("üí≠ Ïù¥ ÌéòÏù¥ÏßÄÏóêÎäî Ï∂îÏ∂ú Í∞ÄÎä•Ìïú ÌÖçÏä§Ìä∏Í∞Ä ÏóÜÏäµÎãàÎã§.")
                        
        except Exception as e:
            st.error(f"‚ùå ÌÖçÏä§Ìä∏ Ï∂îÏ∂ú Ïã§Ìå®: {e}")
            
        finally:
            # ÏûÑÏãú ÌååÏùº ÏÇ≠Ï†ú
            try:
                os.unlink(tmp_path)
            except:
                pass

else:
    # ÏóÖÎ°úÎìú Ï†Ñ ÏïàÎÇ¥ Î©îÏãúÏßÄ
    st.info("""
    üëÜ PDF ÌååÏùºÏùÑ ÏóÖÎ°úÎìúÌïòÎ©¥ ÌÖçÏä§Ìä∏ Ï∂îÏ∂úÏù¥ ÏãúÏûëÎê©ÎãàÎã§.
    
    **ÏßÄÏõê Í∏∞Îä•:**
    - ÌéòÏù¥ÏßÄÎ≥Ñ ÌÖçÏä§Ìä∏ Ï∂îÏ∂ú
    - Ï†ëÍ∏∞/ÌéºÏπòÍ∏∞ Í∞ÄÎä•Ìïú ÌéòÏù¥ÏßÄ Î∑∞
    - ÌÖçÏä§Ìä∏ Îã§Ïö¥Î°úÎìú (Ï†ÑÏ≤¥/ÌéòÏù¥ÏßÄÎ≥Ñ)
    - Ï∂îÏ∂ú ÌÜµÍ≥Ñ ÌëúÏãú
    """)
    
    # ÏÉòÌîå ÌååÏùº ÏïàÎÇ¥
    if os.path.exists("PDFs"):
        pdf_files = [f for f in os.listdir("PDFs") if f.endswith('.pdf')]
        if pdf_files:
            st.markdown("---")
            st.markdown("### üìÅ ÏÉòÌîå ÌååÏùº")
            st.markdown("PDFs Ìè¥ÎçîÏóêÏÑú Îã§Ïùå ÌååÏùºÎì§ÏùÑ ÌÖåÏä§Ìä∏Ìï† Ïàò ÏûàÏäµÎãàÎã§:")
            for pdf in pdf_files[:5]:  # ÏµúÎåÄ 5Í∞úÎßå ÌëúÏãú
                st.code(f"PDFs/{pdf}")